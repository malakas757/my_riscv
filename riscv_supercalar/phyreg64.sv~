`timescale 1ns/1ps

import common::*;




module phyreg64(/*AUTOARG*/
);


   input 			clk;
   input 			reset_n;
   //INT IQ
   input logic [PRF_WIDTH-1:0] 	IQ0_rs1_addr;
   input logic [PRF_WIDTH-1:0] 	IQ0_rs2_addr;
   input logic [PRF_WIDTH-1:0] 	IQ1_rs1_addr;
   input logic [PRF_WIDTH-1:0] 	IQ1_rs2_addr;
   //MEM IQ
   input logic [PRF_WIDTH-1:0] 	MEM_rs1_addr;
   input logic [PRF_WIDTH-1:0] 	MEM_rs2_addr; //for store
   //INT data
   output logic [31:0] 		IQ0_rs1_data;
   output logic [31:0] 		IQ0_rs2_data;
   output logic [31:0] 		IQ1_rs1_data;
   output logic [31:0] 		IQ1_rs2_data;
   //MEM data
   output logic [31:0] 		MEM_rs1_data;
   output logic [31:0] 		MEM_rs2_data;
   // WB
   input 			writeback0_need_to_wb;
   input 			writeback1_need_to_wb;
   input 			writeback2_need_to_wb;
   input 			writeback3_need_to_wb;
   input logic [PRF_WIDTH-1:0] 	writeback0_prd;
   input logic [PRF_WIDTH-1:0] 	writeback1_prd;
   input logic [PRF_WIDTH-1:0] 	writeback2_prd;
   input logic [PRF_WIDTH-1:0] 	writeback3_prd;
   input logic [31:0] 		writeback0_data;
   input logic [31:0] 		writeback1_data;
   input logic [31:0] 		writeback2_data;
   input logic [31:0] 		writeback3_data;
   

   
   logic [31:0] 		prf_file[PRF_NUM-1:0];

   

   always_ff @(posedge clk) begin
      integer 			i;
      if (~reset_n) begin
         for (i = 0 ; i < PRF_NUM ; i = i + 1) begin
            prf_file[i] <= 0;
         end
      end

      if (writeback0_need_to_wb && writeback0_prd != 0)
        prf_file[writeback0_prd] <= writeback0_data;
      if (alu1_wb.valid && alu1_wb.wb_addr != 0)
        prf_file[alu1_wb.wb_addr] <= alu1_wb.wb_data;
      if (muldiv_wb.valid && muldiv_wb.wb_addr != 0)
        prf_file[muldiv_wb.wb_addr] <= muldiv_wb.wb_data;
      if (mem_wb.valid && mem_wb.wb_addr != 0 )
        prf_file[mem_wb.wb_addr] <= mem_wb.wb_data;
   end
   //super big net
   assign IQ0_rs1_data = prf_file[IQ0_rs1_addr];
   assign IQ0_rs2_data = prf_file[IQ0_rs2_addr];
   assign IQ1_rs1_data = prf_file[IQ1_rs1_addr];
   assign IQ1_rs2_data = prf_file[IQ1_rs2_addr];
   assign MEM_rs1_data = prf_file[MEM_rs1_addr];
   assign MEM_rs2_data = prf_file[MEM_rs2_addr];

endmodule
